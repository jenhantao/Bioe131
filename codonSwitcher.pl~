#! /usr/bin/perl -w
optimizeCodonDistance ("aaatttaaaaaagggccc");


%codonHash = (ttt => "f", ttc => "f", tta => "l", ttg => "l",
	      tct => "s", tcc => "s", tca => "s", tcg => "s",
	      tat => "y", tac => "y", taa => "!", tag => "!",
	      tgt => "c", tgc => "c", tga => "!", tgg => "w",
	      ctt => "l", ctc => "l", cta => "l", ctg => "l",
	      cct => "p", ccc => "p", cca => "p", ccg => "p",
	      cat => "h", cac => "h", caa => "q", cag => "q",
	      cgt => "r", cgc => "r", cga => "r", cgg => "r",
	      att => "i", atc => "i", ata => "i", atg => "m",
	      act => "s", acc => "s", aca => "s", acg => "s",
	      aat => "y", aac => "y", aaa => "!", aag => "!",
	      agt => "c", agc => "c", aga => "!", agg => "w",
);
#this subroutine takes one argument, a DNA sequence given as a string
#returns one string representing a DNA sequence which should code for the same polypeptide, but distances between identical codons should be maximized
sub optimizeCodonDistance {
if (@_>1) {
	die "error: too many arguments given to optimizeCodonDistance subroutine\n";
}
my $seq = $_[0];
if(length($seq) % 3 != 0) {
	die "error: input dna sequence must be composed of complete 3 base codons\n";
}
my @seqArray = ();
my %aaLocations = (); #gives the positions at which a particular amino is located, the codon is the hash, returned value is a string of locations; 1 letter code is used
my %codonLocations =(); #gives the positions at which a particular codon is located, the codon is the hash, returned value is a string of locations
for (my $i=0; $i<length($seq); $i+=3) {
	my $codon = substr($seq, $i, 3);
	print("key:".$codon." value:".$aaLocations{$codon}."\n");
	if (defined($codonLocations{
	push (@seqArray, substr($seq, $i, 3));

}


}
